extends layout

include mixins/_groupCard

block content
  .inner
    .userTable
      h2 #{l.groupsTitle} 
      

      if(project && user.project && user.project.name)

        .card 
          .users
            table.table
              thead
                td â„–
                td #{l.groupName} 
                td #{l.groupTitle}  
                td #{l.groupMembers}  
              
              if(users)  
                each group, i in groups
                  +groupCard(users, group, i)
        
        h2 #{l.groupAdd}  
         
        form(action="/api/creategroup" method="POST" id="group")
        
          h6 #{l.groupName} 
          input(type='text' name="groupName" value = '' required)
          p
          h6 #{l.groupSelectParticipants}   
          each user in users
            if(!user.group)
              .tag.tag__choice
                input(type = 'checkbox' id=user.id value=user.id name='participants' checked=false)
                label(for=user.id class="tagLabel") 
                  if (user.username)
                    strong #{user.username} 
                  | #{user.id} 
          if(users.filter(user => !user.group).length === 0)
            p #{l.groupNoParticipantsLeft}  

          p
          input.button(type="submit" value=l.groupCreate form="group")
        
        
        h2 #{l.apiTitle}  

        h6 #{l.apiToken} 
        p= project.notifyToken 
        h6 #{l.apiValidUntil} 
        p= h.moment(project.notifyExpires).locale(language).format("MMMM Do, YYYY")
          
        h4 #{l.apiResetToken} 

        form(action="/api/resetnotifytoken" method="POST" id="token")
          h6 #{l.apiNewTokenExpires} 
          input(type='date' name="notifyExpires" required)
          input.button(type="submit" value="Reset token" form="token")
        
        p
        p
        p
        
        h6 #{l.apiCode} 
        p !{l.apiExplained_1} 
        p !{l.apiExplained_2} 
                
        .code
          .comment #{l.apiCommentData} 
          .div const url = "https://samply.uni-konstanz.de/api/notify";
          .div const data = {
          .one   projectID: "#{project.id}",
          .one   groupID: "${placeholder-for-groupID}",
          .one   participantID: "${placeholder-for-participantID}",
          .one   token: "#{project.notifyToken}",  
          .one   title: "your-title",
          .one   message: "your-message",
          .one   url: "https://your-survey-link/?samplyid=%SAMPLY_ID%&code=%PARTICIPANT_CODE%&group=%GROUP_CODE%&message=%MESSAGE_ID%"
          .div   }
          p
          .comment #{l.apiCommentFunction} 
          .div async function postData(url, data) {
          .one   const response = await fetch(url, {
          .two     method: 'POST', 
          .two     headers: {
          .three       'Content-Type': 'application/json'
          .two     },
          .two     body: JSON.stringify(data) 
          .one   });
          .one   return response;
          .div }
                        
      else
        p Create a new study first

    //- pre=h.dump(groups)
    //- pre=h.dump(project)
