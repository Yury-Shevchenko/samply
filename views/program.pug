extends layout

include mixins/_chosenTestCard
include mixins/_resultLine

block content
  script(src='/javascripts/indexeddb/idb.js' nonce=`${noncevalue}`)
  script(src='/javascripts/indexeddb/utility.js' nonce=`${noncevalue}`)
  .inner
    p
    header.top
      nav.nav
        .nav__section.nav__section--pages
          li.nav__item: a.nav__link(href="/projects", class=(currentPath.startsWith('/projects') ? 'nav__link--active' : '')) #{layout.projects}
          li.nav__item: a.nav__link(href="/constructor", class=(currentPath.startsWith('/constructor') ? 'nav__link--active' : '')) #{layout.chooseTasks}
          li.nav__item: a.nav__link(href="/tasks", class=(currentPath.startsWith('/tasks') ? 'nav__link--active' : '')) #{layout.customizeParameters}
          li.nav__item: a.nav__link(href="/invitations", class=(currentPath.startsWith('/invitations') ? 'nav__link--active' : '')) #{layout.invitations}
          li.nav__item: a.nav__link(href="/notifications", class=(currentPath.startsWith('/notifications') ? 'nav__link--active' : '')) #{layout.notifications}
          li.nav__item: a.nav__link(href="/testing", class=(currentPath.startsWith('/testing') ? 'nav__link--active' : '')) #{layout.tryDemo}
          li.nav__item: a.nav__link(href="/results", class=(currentPath.startsWith('/results') ? 'nav__link--active' : '')) #{layout.demoResults}
    p
    .userTable

      if project && project.name
        h2 #{`${project.name}`}
      else
        p !{l.create_your_project}

      .program

        .tasks
          .card
            .items
              if projectTests && projectTests.length && projectTests.length > 0
                each test in projectTests
                  +chosenTestCard(test)

        if(allParams && allParams != 'nope' && allParams.length > 0)
          .card
            form(action=`/tasks/${test.slug}/upload` method = 'GET' id="uploadSavedParametersForm" style ="display:grid; grid-template-columns: 1fr auto auto; grid-gap: 20px;")
              .selectorOfParameters
                h6= l.savedParameters
                .custom-select-parameters
                  select(name="savedParameter" id="savedParameter")
                    - const savedParameterId = savedParameter && savedParameter != 'nope' && savedParameter._id ? savedParameter._id.toString(): 'nope';
                    option(value='')= l.chooseSavedParameters
                    each parameter in allParams
                      option(value=parameter._id, selected=(savedParameterId === parameter._id.toString()))= `${parameter.slug} (${parameter.language}) ${h.moment(parameter.created).locale(language).format("MMM Do YY, H:mm")}`

              input(type='submit' value=l.upload class="button" style='margin-top: 20px; width: min-content;')

              if(savedParameter && savedParameter != 'nope')
                a(href=`/parameters/delete/${savedParameter._id}`)
                  .button(style="background:red; width:fit-content; color:white; margin-top: 20px;")= l.delete

        .card
          .parameters
            if(param_language)
              script(nonce=`${noncevalue}`).
                document.addEventListener('DOMContentLoaded', function (){
                  if(document.getElementById('activeLanguageParameter')){
                    document.getElementById('activeLanguageParameter').addEventListener('change', function activateLanguage() {
                      const param_language = document.getElementById("activeLanguageParameter").value;
                      window.location.href = `/tasks/!{slug}/modified/${param_language}`
                    });
                  }
                });

            if(original === 'nope' && modified === 'nope' && savedParameter == 'nope')
              if(test && test.description)
                h5= `Description of ${test.name}`
                p= test.description
              if (test.version)
                p= `${l.version}: ${test.version}`
              if (test.script)
                p= `${l.edit_uploaded}: ${test.script}`
              if (test.params && test.params.length > 0)
                p= `${l.task_has_parameters}`
              //- pre= h.dump(test)
              //- pre= h.dump(project)

            if(original && original != 'nope')
              if(original === 'empty' || original.length == 0)
                h5= `${l.subtitle_no_parameters} ${test.name}`
              else
                h5= `${l.subtitle_parameters} ${test.name}`
                - const sortedData = original.sort(function(a,b) {return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);} );
                each key in sortedData
                  .formsforparameters
                    label(for= key.name)
                      strong #{key.name}
                    label(for= key.name) #{key.value}

            if(modified && modified != 'nope' || savedParameter && savedParameter != 'nope')
              label(for="language") #{l.language}
              .custom-select
                select(name="param_language" id="activeLanguageParameter")
                  - var options = [{value: 'english', label: 'English'}, {value: 'german', label: 'Deutsch'}, {value: 'russian', label: 'Русский'}]
                  each option in options
                    option(value=option.value, selected=(param_language === option.value))= option.label

              if(modified === 'empty' || modified.length == 0 || modified === 'nope')
                if(savedParameter && savedParameter != 'nope')
                  form(action=`/tasks/${test._id}/${test.slug}/${savedParameter.language}` method = 'POST' id ="myForm")
                    input(type='submit' value=`${l.apply} ${test.name}` class="button" style='margin-top: 20px;')
                    h5= `${l.savedParametersFor} ${savedParameter.slug} (${savedParameter.language})`
                    p
                    each key in Object.keys(savedParameter.parameters).sort()
                      .formsforparameters
                        label(for= key) #{key}
                        input(type='text' name= key value= savedParameter.parameters[key])
                else
                  if(test && test.params && test.params.length != 0)
                    - let sortedData = test.params.sort(function(a,b) {return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);} );
                    form(action=`/tasks/${test._id}/${test.slug}/${param_language}` method = 'POST' id ="myForm")
                      input.nav__link(type='submit' value=`${l.save} ${test.name}` class="button" style='margin-top: 20px')
                      p
                        | #{l.subtitle_no_customized_1}
                        strong #{test.name}
                        | .
                        |
                        | #{l.subtitle_no_customized_2}
                      p
                      each key in sortedData
                        .formsforparameters
                          label(for= key.name) #{key.name}
                          input(type='text' name= key.name value= key.value)

                    //- script(nonce=`${noncevalue}`).
                      const form = document.querySelector('#myForm');
                      function sendData(){
                        const arr = Array.from(document.querySelectorAll('.formsforparameters'));
                        const params = arr.map(e => {
                          return({[e.children[0].innerText]: e.children[1].value})
                        })
                        const parameters = params.reduce((obj, item) => (obj[Object.keys(item)] = Object.values(item)[0], obj) ,{});

                        fetch(`/tasks/5c5ef185b09601170c65e77d/delay-task/english`, {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                          },
                          body: JSON.stringify({
                            id: new Date().toISOString(),
                            parameters: parameters
                          })
                        })
                          .then(function(res){
                            console.log('send data', res);
                            if(res.url && res.ok){
                              window.location = res.url;
                            }
                          })
                      };
                      form.addEventListener('submit', function(event){
                        event.preventDefault();
                        if ('serviceWorker' in navigator && 'SyncManager' in window){
                          navigator.serviceWorker.ready
                            .then(function(sw){
                              const arr = Array.from(document.querySelectorAll('.formsforparameters'));
                              const params = arr.map(e => {
                                return({[e.children[0].innerText]: e.children[1].value})
                              })
                              const parameters = params.reduce((obj, item) => (obj[Object.keys(item)] = Object.values(item)[0], obj) ,{});
                              var post = {
                                id: new Date().toISOString(),
                                parameters: parameters,
                                test_id: "5c5ef185b09601170c65e77d",
                                test_slug: 'delay-task',
                                param_language: 'English'
                              };
                              writeData('sync-parameters', post)
                                .then(function(){
                                  sw.sync.register('sync-task-parameters');
                                })
                                .then(function(){
                                  console.log("The sync task is registered");
                                  //show visual feedback to user
                                })
                                .catch(function(error){
                                  console.error(error);
                                })
                            });
                        } else {
                          //fallback
                          sendData();
                        }
                      });

              else
                form(action=`/tasks/${test._id}/${test.slug}/${param_language}` method = 'POST' id ="myForm")
                  input.nav__link(type='submit' value=`${l.update} ${test.name}` class="button" style='margin-top: 20px')
                  h5= `${l.subtitle_customized} ${test.name}`
                  p
                  each key in Object.keys(modified).sort()
                    .formsforparameters
                      label(for= key) #{key}
                      input(type='text' name= key value= modified[key])

                  script(nonce=`${noncevalue}`).
                    document.addEventListener('DOMContentLoaded', function (){
                      document.getElementById('addFieldButton').addEventListener('click', function addField() {
                        var container_form = document.getElementById("myForm");
                        var nameOfNewField = document.getElementById("new_field").value;
                        var input = document.createElement("input");
                        input.type = "text";
                        input.name = nameOfNewField;
                        var new_field_holder = document.createElement("div");
                        new_field_holder.className = 'formsforparameters';
                        var label = document.createElement('label');
                        label.innerText = nameOfNewField;
                        new_field_holder.appendChild(label);
                        new_field_holder.appendChild(input);
                        container_form.appendChild(new_field_holder);
                      });
                    });
                p
                h5 #{l.addField}
                input(type="text" name= "new_field" id="new_field" value=l.nameForNewParameter)
                button.button(type="button" value="Add a field" id="addFieldButton") #{l.add}
                p
            else



      //- pre= h.dump(project)
      //- pre= h.dump(slug)
      //- pre= h.dump(original)
      //- pre= h.dump(modified)
