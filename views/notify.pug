extends layout

include mixins/_scheduledNotification

block content
  script(src='/javascripts/datepicker/jquery-3.3.1.min.js' nonce=`${noncevalue}`)
  
  .inner
    if !project
      .card 
        p !{l.message_create_project}
      
    if project 
      p
      h6 #{layout.fill_in_information} 
      p
      h6 #{l.title}  
      input#titleContent(type='text', value = '')
      h6 #{l.message} 
      input#messageContent(type='text', value = '')
      h6 #{layout.web_link} 
      input#urlContent(type='text', value = 'https://')
      p !{layout.example_web_link}
    
      .notifications_scheduler
      
        #choose-participants
          h2 #{l.step_1_header} 
          
          .multipleOptions
            .tag.tag__choice
              input(type = 'checkbox' id='future' value='future' name='participants_future')
              label(for='future' class="tagLabel") #{l.step_1_future}
            .tag.tag__choice
              input(type = 'checkbox' id='current' value='current' name='participants_current' checked=participant)
              label(for='current' class="tagLabel") #{l.step_1_current} 
        
          .specificParticipants(style=`display: ${participant ? 'block' : 'none'}`)
            label(for='tags') #{l.edit_tags}
            ul.tags
              .tag.tag__choice
                input(type = 'checkbox' id='allCurrentParticipants' value='all' checked=!participant name='participants')
                label(for='allCurrentParticipants' class="tagLabel") #{l.step_1_all}
              each user in project.mobileUsers
                .tag.tag__choice
                  input(type = 'checkbox' id=user.id value=user.id name='participants_ids' checked=user.id === participant)
                  label(for=user.id class="tagLabel") #{user.id}
        
        #choose-time
          h2 #{l.step_2_header} 
        
          .options
            input(type='radio', name='time', value='specific')#time-spec
            label(for='time-spec')
              span #{l.step_2_timepoints}  

            input(type='radio', name='time', value='interval')#time-inter
            label(for='time-inter')
              span #{l.step_2_windows} 
        
        #timePicker(style="display:none")  
          .containerTimePicker
            label #{l.step_2_hour} 
            label #{l.step_2_minute}  
            button(type="button" value="Add new time" id="addTimePicker") #{l.step_2_add_timepoint} 
            input(name="time-specific-hour" class='timePickerHour' type='number' min=0 max=23 value='12') 
            input(name="time-specific-minute" class='timePickerMinute' type='number' min=0 max=59 value='00') 
            
        #timeWindow(style="display:none")
          .containerTimeWindow 
            label.fromContainer #{l.step_2_from}  
            
            label 
            label.toContainer #{l.step_2_to}  
            
            label
            label
            button(type="button" value="Add new window" id="addTimeWindow") #{l.step_2_add_window}   
            
            label #{l.step_2_hour}  
            label #{l.step_2_minute}  
            label 
            label #{l.step_2_hour} 
            label #{l.step_2_minute}  
            label
            label #{l.step_2_random}  
            label
            
            input(name="time-window-start-hour" class='timeWindowInput windowPickerHourStart' type='number' min=0 max=23 value='') 
            input(name="time-window-start-minute" class='timeWindowInput windowPickerMinuteStart' type='number' min=0 max=59 value='') 
            label 
            input(name="time-window-end-hour" class='timeWindowInput windowPickerHourEnd' type='number' min=0 max=23 value='') 
            input(name="time-window-end-minute" class='timeWindowInput windowPickerMinuteEnd' type='number' min=0 max=59 value='')   
            label
            input(name="time-window-number-points" class='timeWindowNumberOfPointsInput' type='number' min=1 value=1) 
            
            
        #choose-date
          h2 #{l.step_3_header} 
        
          .options
            input(type='radio', name='date', value='specific')#date-spec
            label(for='date-spec')
              span #{l.step_3_dates} 

            input(type='radio', name='date', value='every')#date-every
            label(for='date-every')
              span #{l.step_3_every}  
              select(name="date-every-day")
                - var everymonthdays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
                each day in everymonthdays
                  option(value=day, selected=false)= day 
              span #{l.step_3_days} 
            
              
            input(type='radio', name='date', value='spec-week')#date-spec-week
            label(for='date-spec-week')
              span #{l.step_3_weekday} 
              - var specific_weekdays = [l.Monday, l.Tuesday, l.Wednesday, l.Thursday, l.Friday, l.Saturday, l.Sunday]
              .weekTags
                each day in specific_weekdays 
                  .tag.tag__choice
                    input(type = 'checkbox' id=day value=day name='date-spec-week-day')
                    label(for=day class="tagLabel") #{day}
          
            input(type='radio', name='date', value='spec-month')#date-spec-month
            label(for='date-spec-month')
              span #{l.step_3_monthday} 
              - var specific_monthdays = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
              .dayTags
                each day in specific_monthdays
                  .tag.tag__choice
                    input(type = 'checkbox' id=day value=day name='date-spec-week-month')
                    label(for=day class="tagLabel") #{day}
        
        #datePicker(style="display:none")
          .containerDatePicker
            label #{l.step_3_day}  
            label #{l.step_3_month} 
            label #{l.step_3_yeary}  
            button(type="button" value="Add new date" id="addDatePicker") #{l.step_3_add_date}  
            input(name="date-specific-day" class='datePickerInput datePickerDay' type='number' min=1 max=31 value=`${(new Date).getDate()}`) 
            input(name="date-specific-month" class='datePickerInput datePickerMonth' type='number' min=1 max=12 value=`${(new Date).getMonth() + 1}`) 
            input(name="date-specific-year" class='datePickerInput datePickerYear' type='number' value=`${(new Date).getFullYear()}`) 
        

        #choose-month  
          h2 #{l.step_4_header} 
            
          .options
            input(type='radio', name='month', value='every')#month-every
            label(for='month-every')
              span #{l.step_4_any}  

            input(type='radio', name='month', value='specific')#month-spec
            label(for='month-spec')
              span #{l.step_4_specific} 
              - var specific_months = [l.january, l.february, l.march, l.april, l.may, l.june, l.july, l.august, l.september, l.october, l.november, l.december]
              .weekTags
                each month in specific_months 
                  .tag.tag__choice
                    input(type = 'checkbox' id=month value=month name='month-spec-month')
                    label(for=month class="tagLabel") #{month}
              
        
        #choose-start
          h2 #{l.step_5_header} 
          
          .options
            input(type='radio', name='start', value='specific')#start-specific
            label(for='start-specific')
              span #{l.step_5_timepoint} 
              .timeTable
                span #{l.step_5_hour} 
                span #{l.step_5_minute} 
                span #{l.step_5_day} 
                span #{l.step_5_month} 
                span #{l.step_5_year} 
              
                input(name="start-specific-hour" type='number' min=0 style="width: 100px;" value=`${(new Date).getHours()}`)
                input(name="start-specific-minute" type='number' min=0 style="width: 100px;" value=`${(new Date).getMinutes()}`)
                input(name="start-specific-day" class='datePickerInput' type='number' min=1 max=31 value=`${(new Date).getDate()}` style="width: 100px;") 
                input(name="start-specific-month" class='datePickerInput' type='number' min=1 max=12 value=`${(new Date).getMonth() + 1}` style="width: 100px;") 
                input(name="start-specific-year" class='datePickerInput' type='number' min=2020 value=`${(new Date).getFullYear()}` style="width: 100px;") 

            input(type='radio', name='start', value='event')#start-event
            label(for='start-event')
              span #{l.step_5_participant}   
              input(name="start-event-days" type='number' min=0 style="width: 60px;" value=0)
              span #{l.step_5_days}  
              input(name="start-event-hours" type='number' min=0 style="width: 60px;" value=0)
              span #{l.step_5_hours}  
              input(name="start-event-minutes" type='number' min=0 style="width: 60px;" value=0)
              span #{l.step_5_minutes}   
              select(name="start-event-at")
                - var start_events = [{value: 'registration',  text: l.step_5_registration }, {value:'now', text: l.step_5_now }]
                each event in start_events
                  option(value=event.value, selected=false)= event.text
      
            input(type='radio', name='start', value='next')#start-next
            label(for='start-next')
              span Start sending notification for each participant on the 
              select(name="start-next-day")
                - var nextstartdays = [ { value: 1,  text: '1st (same)' }, { value: 2,  text: '2nd (next)' }, { value: 3,  text: '3rd' }, ...[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,29,20,21].map(d => {return( { value: d, text: `${d}th`} )}), { value: 22,  text: '22nd' }, { value: 23,  text: '23rd' }, ...[24,25,26,27,28,29,30].map(d => {return( { value: d, text: `${d}th`} )}) ]
                each day in nextstartdays
                  option(value=day.value, selected=false)= day.text  
              span  day after
              select(name="start-next-at")
                - var start_events = [{value: 'registration',  text: l.step_5_registration }, {value:'now', text: l.step_5_now }]
                each event in start_events
                  option(value=event.value, selected=false)= event.text
                  
        #choose-stop  
          h2 #{l.step_6_header}     
          
          .options
            input(type='radio', name='stop', value='specific')#stop-specific
            label(for='stop-specific')
              span #{l.step_6_timepoint} 
              
              .timeTable
                span #{l.step_5_hour} 
                span #{l.step_5_minute} 
                span #{l.step_5_day} 
                span #{l.step_5_month} 
                span #{l.step_5_year} 
              
                input(name="stop-specific-hour" type='number' min=0 style="width: 100px;" value=`${(new Date).getHours()}`)
                input(name="stop-specific-minute" type='number' min=0 style="width: 100px;" value=`${(new Date).getMinutes()}`)
                input(name="stop-specific-day" class='datePickerInput' type='number' min=1 max=31 value=`${(new Date).getDate()}` style="width: 100px;") 
                input(name="stop-specific-month" class='datePickerInput' type='number' min=1 max=12 value=`${(new Date).getMonth() + 1}` style="width: 100px;") 
                input(name="stop-specific-year" class='datePickerInput' type='number' min=2020 value=`${(new Date).getFullYear()}` style="width: 100px;") 

        
            input(type='radio', name='stop', value='event')#stop-event
            label(for='stop-event')
              span #{l.step_6_participant}   
              input(name="stop-event-days" type='number' min=0 style="width: 60px;" value=0)
              span #{l.step_5_days}   
              input(name="stop-event-hours" type='number' min=0 style="width: 60px;" value=0)
              span #{l.step_5_hours} 
              input(name="stop-event-minutes" type='number' min=0 style="width: 60px;" value=0)
              span #{l.step_5_minutes}  
              select(name="stop-event-at")
                - var stop_events = [ {value: 'registration',  text: l.step_5_registration }, {value:'now', text: l.step_5_now } ]
                each event in stop_events
                  option(value=event.value, selected=false)= event.text 

            input(type='radio', name='stop', value='next')#stop-next
            label(for='stop-next')
              span Stop sending notification for each participant on the       
              select(name="stop-next-day")
                - var nextstopdays = [ { value: 1,  text: '1st (same)' }, { value: 2,  text: '2nd (next)' }, { value: 3,  text: '3rd' }, ...[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,29,20,21].map(d => {return( { value: d, text: `${d}th`} )}), { value: 22,  text: '22nd' }, { value: 23,  text: '23rd' }, ...[24,25,26,27,28,29,30].map(d => {return( { value: d, text: `${d}th`} )}) ]
                each day in nextstopdays
                  option(value=day.value, selected=false)= day.text        
              span day after    
              select(name="stop-next-at")
                - var start_events = [{value: 'registration',  text: l.step_5_registration }, {value:'now', text: l.step_5_now }]
                each event in start_events
                  option(value=event.value, selected=false)= event.text        
        p
        p          
        #send-button 
          button(id="createNotificationBtn" class="button") #{l.schedule_notifications} 
          
        div#output
        
        //- pre= h.dump(jobs)
        
        script(type='text/javascript', src='/notifications/create.js' nonce=`${noncevalue}`)
        script(type='text/javascript', src='/notifications/timePicker.js' nonce=`${noncevalue}`)
        script(type='text/javascript', src='/notifications/datePicker.js' nonce=`${noncevalue}`)
        script(src='/javascripts/modules/moment.js' nonce=`${noncevalue}`)
        
        
        script(defer type='text/javascript' nonce=`${noncevalue}`).
          $(document).ready( function () {
            const output = document.querySelector('#output');
            const input = document.querySelectorAll('input');
            input.addEventListener('change', updateValue);
            function updateValue({ target }) {
              if( target.type === 'text') {
                return;
              }
              
              const { name,  value } = target;
              console.log('name', name, value)
               
              // change css styles of chosen and not chosen options
              document.querySelectorAll(`input[name=${target.name}]`).forEach(target => {
                target.labels.forEach(label => {
                  if(!label.classList.contains('tagLabel')){
                    label.classList.remove('chosen')
                    label.classList.add('unchosen')
                  } 
                  })
                })
              target.labels.forEach(label => {
                if(!label.classList.contains('tagLabel')){
                  label.classList.remove('unchosen')
                  label.classList.add('chosen')
                }
                });
              
              if(name === 'participants_current'){
                if(target.checked){
                  document.querySelector('.specificParticipants').style.display = 'block';
                } else {
                  document.querySelector('.specificParticipants').style.display = 'none';
                }
              }
            
              // show the participants if specific is chosen
              if(name === 'participants'){
                if(value === 'all'){
                  if(target.checked){
                    document.querySelectorAll("input[name='participants_ids']").forEach(e => e.checked = false);
                  }
                }
              }
              
              // if the specific participants are chosen
              if(name === 'participants_ids'){
                document.querySelectorAll("input[id='allCurrentParticipants']").forEach(e => e.checked = false);
              }
              
              // show the calendar or all other options 
              if(name === 'time'){
                if(value  === 'specific') {
                  // show time picker 
                  document.querySelector('#timePicker').style.display = 'block';
                  document.querySelector('#timeWindow').style.display = 'none';
                } else {
                  // show time window picker 
                  document.querySelector('#timePicker').style.display = 'none';
                  document.querySelector('#timeWindow').style.display = 'block';
                }
              }
              
              // show the calendar or all other options 
              if(name === 'date'){
                if(value  === 'specific') {
                  document.querySelector('#datePicker').style.display = 'block';
                  document.querySelector('#choose-month').style.display = 'none';
                  document.querySelector('#choose-start').style.display = 'none';
                  document.querySelector('#choose-stop').style.display = 'none';
                } else {
                  document.querySelector('#datePicker').style.display = 'none';
                  document.querySelector('#choose-month').style.display = 'block';
                  document.querySelector('#choose-start').style.display = 'block';
                  document.querySelector('#choose-stop').style.display = 'block';
                }
              }
              
            }
          })
        
  
    if (project && project.notifications && project.notifications.length > 0)
      .card
        h2 #{l.scheduled_notifications} 
        
        .reviews
          each notification, i in project.notifications
            .review
              +scheduledNotification(notification, i)  

        p  
        button(id="delete_all_notifications" class="button" style="background-color:red; color:white; max-width:300px;") #{l.delete_notifications} 
        script(type='text/javascript', src='/notifications/scheduled.js' nonce=`${noncevalue}`)
