mixin projectForm(project = {})

  form(action=`/projects/${project._id || ''}` method = 'POST')
    label(for='name') #{l.name}
    input(type='text' name='name' value=project.name required)
      
    label(for='description') #{l.description}
    textarea(type='text' name='description')= project.description

    label(for='welcomeMessage') #{l.welcomeMessage}
    textarea(type='text' name='welcomeMessage')= project.welcomeMessage
    
    label(for='codeMessage') #{l.codeMessage}
    div.inputCheckBox
      input(type='checkbox' id= 'askParticipantCode' name= 'askParticipantCode' checked = project.settings && project.settings.askParticipantCode)
      label(for='askParticipantCode')
        span.
          #{l.askUsername}
    textarea(type='text' name='codeMessage')= project.codeMessage
    
    label(for='messageAfterJoin') #{l.messageAfterJoin}
    textarea(type='text' name='messageAfterJoin')= project.messageAfterJoin
    
    label(for='image') #{l.imageURL} 
    input(type='text' name='image' value=project.image)
    
    p
    .div(id="membersList")
      label(for="members") #{l.invite_members}
      if membersEmails && membersEmails.length > 0
        each memberEmail in membersEmails
          .invitation_row
            input(type='text' name='members' value=memberEmail)
            .checkmark 
              p âœ…
      p
      input(type='text' name='members')
    .div(id="newMember")
            
    script(nonce=`${noncevalue}`).
      document.addEventListener('DOMContentLoaded', function (){
        document.getElementById('addFieldButton').addEventListener('click', function addField() { 
          var container = document.getElementById("newMember");
          var input = document.createElement("input");
          input.type = "text";
          input.name = "members";
          container.appendChild(input);
        });
      });
    
    button(type="button" value="Add a field" id="addFieldButton") #{l.add_field}
    p
    
    div.inputCheckBox
      input(type='checkbox' id= 'enableGeofencing' name= 'enableGeofencing' checked = project.settings && project.settings.enableGeofencing)
      label(for='enableGeofencing')
        span.
          Enable Geofencing (geofencing allows you to notify and send surveys to your participants when they enter or leave specific areas, e.g. home, supermarket, workplace)
    
    #geofencing_editor
    
      h2 Geofencing 
      
      label(for='geofencingInstruction') Geofencing requires a constant tracking of geolocation. This tracking happens on the participant device, so neither Samply nor you will have the information about the absolute geolocation of participants. However, it is important that participants understand how you will use the information, such as when they enter or leave geofenced areas. Please provide the information about the geofencing to the participant. This instruction will be shown when the participant has joined your study.
      textarea(type='text' name='geofencingInstruction')= project.geofencingInstruction
      
      h5 User-defined locations
      label(for='geofencingURL') If you ask participants to provide their own locations, specify the URL link of the survey/task and the radius (in meters) for a location. Leave the URL field blank if you do not use an external online task/survey. In this case, participants will be only notified when they enter or exit the geofenced area.
      
      .div(class="locationContainer") 
        .div  
          input(type='text' name='geofencingURL' value=project.settings && project.settings.geofencing && project.settings.geofencing.link placeholder="Enter the link to your online survey (the link will be sent with the notification)")
          input(type='text' name=`userLocationRadius` value=project.settings && project.settings.geofencing && project.settings.geofencing.radius placeholder="Enter the radius (in meters)")
        .div
          div.inputCheckBox
            input(type='checkbox' id=`event-enter` name=`event-enter` checked = project.settings && project.settings.geofencing && project.settings.geofencing.events && project.settings && project.settings.geofencing && project.settings.geofencing.events.includes('enter'))
            label(for=`event-enter`) Trigger on enter
          
          div.inputCheckBox
            input(type='checkbox' id=`event-exit` name=`event-exit` checked = project.settings && project.settings.geofencing && project.settings.geofencing.events && project.settings && project.settings.geofencing && project.settings.geofencing.events.includes('exit'))
            label(for=`event-exit`) Trigger on exit
        
          div.inputCheckBox
            input(type='checkbox' id=`invisible` name=`invisible` checked = project.settings && project.settings.geofencing && project.settings.geofencing.invisible === 1 )
            label(for=`invisible`) Hide notifications but record the events
          
      
      h5 Researcher-defined locations
      
      if (project.settings && project.settings.geofencing && project.settings.geofencing.locations)
      
        h2 Map of geofenced locations
        .map
          #geofenced_map
        
        each location, i in project.settings.geofencing.locations
          .div(id=`div-${location.slug}` class="locationContainer")    
            h6= location.title
            .div
            .div
              input(type='text' name=`slug-${location.slug}` value=location.slug hidden)
              input(type='text' name=`title-${location.slug}` value=location.title placeholder="title")
              input(type='text' name=`latitude-${location.slug}` value=location.latitude placeholder="latitude")
              input(type='text' name=`longitude-${location.slug}` value=location.longitude placeholder="longitude")
              input(type='text' name=`radius-${location.slug}` value=location.radius placeholder="radius (in meters)")
              input(type='text' name=`link-${location.slug}` value=location.link placeholder="url link")
            
            .div
              div.inputCheckBox
                input(type='checkbox' id=`event-enter-${location.slug}` name=`event-enter-${location.slug}` checked = location.events && location.events.includes('enter'))
                label(for=`event-enter-${location.slug}`) Trigger on enter
              
              div.inputCheckBox
                input(type='checkbox' id=`event-exit-${location.slug}` name=`event-exit-${location.slug}` checked = location.events && location.events.includes('exit'))
                label(for=`event-exit-${location.slug}`) Trigger on exit
            
              div.inputCheckBox
                input(type='checkbox' id=`invisible-${location.slug}` name=`invisible-${location.slug}` checked = location.invisible === 1 )
                label(for=`invisible-${location.slug}`) Hide notifications but record the events
                  
            button(name="deleteBtn" id=`delete-${location.slug}`) Delete
            p  
      
    
      label(for='coordinates' id="coordinates") Enter the information about locations that should apply to all participants.
         | Start adding new locations, and they will be shown on the map after you click "Save". 
         | Then you can edit the locations by dragging markers on the map.        
       
      p
      input(type="text" name= "locationName" id="locationName" placeholder="Location name")
      button.button(type="button" value="Add new location" id="addLocationButton") Add location   
    
    
    
    script(nonce=`${noncevalue}`).
      document.addEventListener('DOMContentLoaded', function (){
        
        document.querySelectorAll('button[name="deleteBtn"]').forEach((button) => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            button.parentElement.remove();
         });
        })
        document.getElementById('addLocationButton').addEventListener('click', function addField() {
          const locationName = document.getElementById("locationName").value;
          const locationSlug = locationName.toLowerCase().replace(/\s+/g, "-").trim() 
          if(!locationName) {
            alert('Enter the location name') 
            return;
          } 
          const coordinates = document.getElementById("coordinates");
          const locationDiv = document.createElement("div");
          locationDiv.id = `div-${locationSlug}`;
          locationDiv.classList.add('locationContainer');
        
          var label = document.createElement('h6');
          label.innerText = locationName;
          var slug = document.createElement('input');
          slug.name = `slug-${locationSlug}`;
          slug.type = 'text';
          slug.value = locationName;
          slug.hidden = true;
          var title = document.createElement('input');
          title.name = `title-${locationSlug}`;
          title.type = 'text';
          title.value = locationName;
          var lat_input = document.createElement("input");
          lat_input.type = 'text';
          lat_input.name = `latitude-${locationSlug}`;
          lat_input.placeholder = 'Enter latitude';
          var lon_input = document.createElement("input");
          lon_input.type = 'text';
          lon_input.name = `longitude-${locationSlug}`;
          lon_input.placeholder = 'Enter longitude';
          var rad_input = document.createElement("input");
          rad_input.type = 'text';
          rad_input.name = `radius-${locationSlug}`;
          rad_input.placeholder = 'Enter radius';
          var link = document.createElement('input');
          link.name = `link-${locationSlug}`;
          link.type = 'text';
          link.placeholder = 'Enter the URL link to your online task or survey';
          
          // add events 
          var event_enter_input_div = document.createElement("div");
          event_enter_input_div.classList.add('inputCheckBox');
          var event_enter_input = document.createElement("input");
          event_enter_input.type = 'checkbox';
          event_enter_input.name = `event-enter-${locationSlug}`;
          event_enter_input.id = `event-enter-${locationSlug}`;
          var event_enter_input_label = document.createElement("label");
          event_enter_input_label.innerText = 'Notify on enter';
          event_enter_input_label.setAttribute('for', `event-enter-${locationSlug}`);
          event_enter_input_div.appendChild(event_enter_input);
          event_enter_input_div.appendChild(event_enter_input_label);
        
          var event_exit_input_div = document.createElement("div");
          event_exit_input_div.classList.add('inputCheckBox');
          var event_exit_input = document.createElement("input");
          event_exit_input.type = 'checkbox';
          event_exit_input.name = `event-exit-${locationSlug}`;
          event_exit_input.id = `event-exit-${locationSlug}`;
          var event_exit_input_label = document.createElement("label");
          event_exit_input_label.innerText = 'Notify on exit';
          event_exit_input_label.setAttribute('for', `event-exit-${locationSlug}`);
          event_exit_input_div.appendChild(event_exit_input);
          event_exit_input_div.appendChild(event_exit_input_label);
          
          var invisible_mode_div = document.createElement("div");
          invisible_mode_div.classList.add('inputCheckBox');
          var invisible_mode = document.createElement("input");
          invisible_mode.type = 'checkbox';
          invisible_mode.name = `invisible-mode-${locationSlug}`;
          invisible_mode.id = `invisible-mode-${locationSlug}`;
          var invisible_mode_label = document.createElement("label");
          invisible_mode_label.innerText = 'Invisible mode (do not show notifications but record the events)';
          invisible_mode_label.setAttribute('for', `invisible-mode-${locationSlug}`);
          invisible_mode_div.appendChild(invisible_mode);
          invisible_mode_div.appendChild(invisible_mode_label);
            
          const deleteBtn = document.createElement("button");
          deleteBtn.innerText = "Delete";
          deleteBtn.onclick = (e) => {
            e.preventDefault();
            deleteBtn.parentElement.remove();
          };
          const firstColumnDiv = document.createElement("div");
          const secondColumnDiv = document.createElement("div");
          const emptyDiv = document.createElement("div");
          firstColumnDiv.appendChild(slug);
          firstColumnDiv.appendChild(title);
          firstColumnDiv.appendChild(lat_input);
          firstColumnDiv.appendChild(lon_input);
          firstColumnDiv.appendChild(rad_input);
          firstColumnDiv.appendChild(link);
          secondColumnDiv.appendChild(event_enter_input_div);
          secondColumnDiv.appendChild(event_exit_input_div);
          secondColumnDiv.appendChild(invisible_mode_div);
          
          locationDiv.appendChild(label);
          locationDiv.appendChild(emptyDiv);
          locationDiv.appendChild(firstColumnDiv);
          locationDiv.appendChild(secondColumnDiv);
          locationDiv.appendChild(deleteBtn);  
          
          coordinates.appendChild(locationDiv);
        });
      });
    p
    
    input(type='submit' value=l.submit class="button")    
    
    script(nonce=`${noncevalue}`).
      const project = !{ JSON.stringify(project) }
      const locations = project?.settings?.geofencing?.locations ||Â [];
      
      if(project?.settings?.enableGeofencing) {
        document.getElementById('geofencing_editor').style.display = "block";
      } else {
        document.getElementById('geofencing_editor').style.display = "none";
        document.getElementById('enableGeofencing').addEventListener('change', function shownGeofencingEditor(){
          if (this.checked) {
            document.getElementById('geofencing_editor').style.display = "block";
          } else {
            document.getElementById('geofencing_editor').style.display = "none";
          }
        })
      }
      
      window.onload = () => {
        if(locations.length)Â {

          const mapDiv = document.getElementById("geofenced_map");
          
          const lat = locations[0].latitude;
          const lng = locations[0].longitude;
          const position = { lat, lng };
          
          const mapOptions = {
            center: position,
            zoom: 15
          }
          
          function onDragEnd(e, location) {
            const lat = e.latLng.lat();
            const lng = e.latLng.lng();
            const newCenterPosition = new google.maps.LatLng(
        			parseFloat(lat),
        			parseFloat(lng)
        		  );

            document.querySelector(`[name='latitude-${location.slug}']`).value = lat;
            document.querySelector(`[name='longitude-${location.slug}']`).value = lng;
            
            const oldCircle = circles[location.slug];
            oldCircle.setMap(null);
            
            var circle = new google.maps.Circle({
        			radius: location.radius, 
        			center: newCenterPosition,
        			map: map,
        			fillColor: '#FF0000',
        			fillOpacity: 0.2,
        			strokeColor: '#FF0000',
        			strokeOpacity: 0.6
        		}); 
            
            circles[location.slug] = circle;
          }
          
          // make a map
          const map = new google.maps.Map(mapDiv, mapOptions)
          
          // create latlngbounds object
          var latlngbounds = new google.maps.LatLngBounds();
          
          // add markers and circles 
          let circles = {};
          locations.map(location => {

            const centerPosition = new google.maps.LatLng(
        			parseFloat(location.latitude),
        			parseFloat(location.longitude)
        		  );
          
            const marker = new google.maps.Marker({
              map: map,
              position: centerPosition,
              draggable: true,
              label: location.title,
            })
            
            marker.addListener('dragend', (e) => onDragEnd (e, location));
            latlngbounds.extend(marker.position);
            
            var circle = new google.maps.Circle({
        			radius: location.radius, 
        			center: centerPosition,
        			map: map,
        			fillColor: '#FF0000',
        			fillOpacity: 0.2,
        			strokeColor: '#FF0000',
        			strokeOpacity: 0.6,
              id:`my-circle-${location.slug}`
        		}); 
            circles[location.slug] = circle;
          })
        
          // Get the boundaries of the Map.
          var bounds = new google.maps.LatLngBounds();
          // Center map and adjust Zoom based on the position of all markers.
          map.setCenter(latlngbounds.getCenter());
          map.fitBounds(latlngbounds, 100);
        
          mapDiv.style.height = '600px';
          
        }
      }
      
    //- pre=h.dump(project)

      
